const mysql = require('mysql');
var connection = null;
var promise = require('promise');
connection = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'seguimiento'
});
/**
 * Función sólo para testear la BD
 */
function databaseConnection() {


    connection.connect((err) => {

        if (err) {
            console.error('error: ' + err.stack)
            return;
        }
        else if (!err) {
            console.log('conexión exitosa' + connection.threadId);
        }
    })

}

function login (){

var username = request.body.username;
    var password = request.body.password;
    if (username && password) {
        connection.query('SELECT * FROM accounts WHERE username = ? AND password = ?', [username, password], function(error, results, fields) {
            if (results.length > 0) {
                request.session.loggedin = true;
                request.session.username = username;
                response.redirect('/home');
            } else {
                response.send('Incorrect Username and/or Password!');
            }           
            response.end();
        });
    } else {
        response.send('Please enter Username and Password!');
        response.end();
    }

}

/*connection.end((err) => {
  // The connection is terminated gracefully
  // Ensures all previously enqueued queries are still
  // before sending a COM_QUIT packet to the MySQL server.
});
*/


/**
 * Función para insertar puntos en la BD
 * @param  {} lat latitud pasada por url
 * @param  {} long longitu pasada por url
 */
function insertPoints(lat, long,id) {
    let point = `POINT(${lat} ${long})`;
    let query = `INSERT INTO gps(point,vehiculos_idvehiculo) SELECT ST_GeomFromText('${point}'),idvehiculo FROM vehiculos WHERE headers = '${id}' `;
    
connection.connect(function(err) {
    connection.query(query, (err, result, fields) => {
        if (!err) {
            //console.log(`results: ${result}`);
            console.log(JSON.stringify(result))
        } else if (err) {
            console.log(`error: ${err}`);
        }
    });
});
}

/**
 * Función para consultar a la BD
 */
function getPoints() {
    // consulta de la db para traerse como objeto legible los puntos 
    let query = `SELECT id, ST_AsText(point) AS POINT,  ST_X(point) AS LATITUD, ST_Y(point) AS LONGITUDE FROM gps;`;

    connection.query(query, (err, result, fields) => {
        if (!err) {
            console.log(`results: ${result}`);
            result.forEach(element => {
                console.log(element);
            });
        } else if (err) {
            console.log(`error: ${err}`);
        }
    })
}


var getVehiculosCordenadas = new Promise(function(resolve, reject) {

let query = `SELECT ve.idVehiculo , ST_X(gp.point) AS LATITUD, ST_Y(gp.point) AS LONGITUDE, ve.nombre, gp.id FROM vehiculos as ve , gps as gp WHERE gp.vehiculos_idvehiculo= ve.idvehiculo AND gp.id = (SELECT MAX(gpso.id) FROM gps as gpso where gpso.vehiculos_idvehiculo = ve.idvehiculo);`;
    
    connection.query(query, (err, result, fields) => {
        if (!err) {
           
           resolve(JSON.parse(JSON.stringify(result)));
           console.log('en la promesa de la database');
        
           
        } else if (err) {
            console.log(`error: ${err}`);
            reject(err);
        }

});
});

/*function getpunto () {
return promise((resolve, reject) => {

    let query = `SELECT ve.idVehiculo , ST_X(gp.point) AS LATITUD, ST_Y(gp.point) AS LONGITUDE, ve.nombre, gp.id FROM vehiculos as ve , gps as gp WHERE gp.vehiculos_idvehiculo= ve.idvehiculo AND gp.id = (SELECT MAX(gpso.id) FROM gps as gpso where gpso.vehiculos_idvehiculo = ve.idvehiculo);`;
     console.log("en getpunto");

connection.connect(function(err) {
    connection.query(query, (err, result, fields) => {
        if (!err) {
            result.forEach(element => {
              console.log("se repite");

            });
            resolve(JSON.parse(JSON.stringify(result)));
            console.log(JSON.stringify(result))
        } else if (err) {
            console.log(`error: ${err}`);
             reject(err);
        }
    });
});

});
}  */




/*let getVehiculosCordenadas =new Promise(function(resolve, reject) {
    // consulta de la db para traerse como objeto legible los puntos 
    connection.connect(function(err) {
  if (err) throw err
  
    let query = `SELECT ve.idVehiculo , ST_X(gp.point) AS LATITUD, ST_Y(gp.point) AS LONGITUDE, ve.nombre, gp.id FROM vehiculos as ve , gps as gp WHERE gp.vehiculos_idvehiculo= ve.idvehiculo AND gp.id = (SELECT MAX(gpso.id) FROM gps as gpso where gpso.vehiculos_idvehiculo = ve.idvehiculo);`;
    console.log('en la promesa de la database');
    connection.query(query, (err, result, fields) => {
        if (!err) {
            
         result.forEach(element => {
              console.log("se repite");

            });
            resolve(JSON.parse(JSON.stringify(result)));
            //console.log("estos son los datos?" + JSON.stringify(result) + "\n");
            
           
        } else if (err) {
            console.log(`error: ${err}`);
            reject(err);
        }
    });
});
});   */


/*var Getnewpoint = new Promise(function(resolve,reject){
//connection.connect(); 
let query = `SELECT ve.idVehiculo , ST_X(gp.point) AS LATITUD, ST_Y(gp.point) AS LONGITUDE, ve.nombre, gp.id FROM vehiculos as ve , gps as gp WHERE gp.vehiculos_idvehiculo= ve.idvehiculo AND gp.id = (SELECT MAX(gpso.id) FROM gps as gpso where gpso.vehiculos_idvehiculo = ve.idvehiculo);`;

connection.query(query, (err, result, fields) => {

        if (!err) {
        
            result.forEach(element => {
               // console.log(element);
                //console.log("estos son los datos?" + JSON.stringify(element));

            });
            resolve(JSON.parse(JSON.stringify(result)));
            console.log("estos son los datos?" + JSON.stringify(result) + "\n");

        } else if (err) {
            console.log(`error: ${err}`);
            reject(`${err}`);
        }
});
  //   connection.end(); 

 });*/

/*function getnewpoint() {
    // consulta de la db para traerse como objeto legible los puntos 
    let query = `SELECT ve.idVehiculo , ST_X(gp.point) AS LATITUD, ST_Y(gp.point) AS LONGITUDE, ve.nombre, gp.id FROM vehiculos as ve , gps as gp WHERE gp.vehiculos_idvehiculo= ve.idvehiculo AND gp.id = (SELECT MAX(gpso.id) FROM gps as gpso where gpso.vehiculos_idvehiculo = ve.idvehiculo);`;
    connection.query(query, (err, result, fields) => {
        if (!err) {
            console.log(`results: ${result}`);
            result.forEach(element => {
                console.log(element);
            });
        } else if (err) {
            console.log(`error: ${err}`);
        }
    })
} */

module.exports = {
    databaseConnection,
    insertPoints,
    getPoints,
    getVehiculosCordenadas

} 

--------------------------------------------------------------------------------------------

const port = 3000 || process.env.PORT;
var express = require('express');
var app = express();
var server = require('http').Server(app);
var router = express.Router();
var path = require('path');
var session = require('express-session');
var mysql = require('mysql');

app.use('/insert', require('./routes/insert'));
var bodyParser = require('body-parser');
var database = require('./controllers/database.js');
//app.use(express.static(path.join(__dirname,'public')));



//////////// Creacion del servidor socket io
var SOCKET_MONITOR_ID=null;
var CLIENTES=[];//{id,socket_id}
var ID=null;
var io = require('socket.io').listen(server);

// Nueva conexiòn
io.on('connection', function (socket) {
    
    var address = socket.handshake.address;
    console.log('New connection from ' + address.address + ':' + address.port);

    socket.on("loginMonitor",function(data,response){
       if(data.monitor="monitor"){  
           SOCKET_MONITOR_ID=socket.id;
           var info={id:socket.id};            
           response(info);
       }    
    });
    socket.on("loginCliente",function(data,response){//data={id}
        var index=buscar(data);
        if(index===-1){//NO ENCONTRADO
            
            CLIENTES.push({id:data.id,socket_id:socket.id});
            var info={estado:1,id:data.id};            
            response(info);
        }
        else{
            var info={estado:0,id:null};               
            response(info);
        }
        
    }); 
    socket.on("posicionClientes", function(data) //{ID,LAT,LON}
     {
        console.log(JSON.parse(JSON.stringify(data)));
        //console.log(data);
        if(SOCKET_MONITOR_ID!=null)
            io.sockets.connected[SOCKET_MONITOR_ID].emit('monitorPrincipal',data);
        //io.emit('monitorPrincipal',data);

    }); 

    socket.on("posicionVehiculos", function() {
    database.getVehiculosCordenadas.then(function(env) {
        
         env.forEach(element => {
            database.getVehiculosCordenadas
            console.log("estoy en la promesa", element.idVehiculo,element.LONGITUDE,element.LATITUD,element.id); 
            //console.log(env);
            var obj={};
            obj.id = element.nombre;
            obj.lon= element.LONGITUDE;
            obj.lat= element.LATITUD;
            if(SOCKET_MONITOR_ID!=null)
            io.sockets.connected[SOCKET_MONITOR_ID].emit('monitorPrincipal',obj);

            });
}, function(reason) {
  console.log(reason); // Error!
});
    });

        
    socket.on("disconnect", function() {
        console.log('Clave Desconectada: '+socket.id);
        var n=CLIENTES.length;
        for(var i=0;i<n;i++){
            if(CLIENTES[i].socket_id==socket.id){
                
                if(SOCKET_MONITOR_ID!=null)
                    io.sockets.connected[SOCKET_MONITOR_ID].emit('monitorPrincipalDisconnet',CLIENTES[i]);//EL CLIENTE DEBE SER BORRADO
                
                CLIENTES.splice(i, 1);//eliminamos el usuario               
                break;
            }
        }
    });
});

function buscar(data){
        var index=-1;       
        var n=CLIENTES.length;
        for(var i=0;i<n;i++){
            if(CLIENTES[i].id===data.id){
                index=i;
                break;
            }
        }           
        return index;           
}   


server.listen(port, function () {
    console.log('servidor corriendo en el puerto : ' + port);
})

module.exports = router, app;
--------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8"/>
    <script src="../marker.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCYdZMqQzizExBU-PYxPheT4FsfEg8Vqfs"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="http://127.0.0.1:3000/socket.io/socket.io.js"></script>
    <script src="../SpryAssets/SpryCollapsiblePanel.js" type="text/javascript"></script>
    <script type="text/javascript" src="../server.js"></script>
    <script type="text/javascript"src="../routes/insert.js"></script>
    <meta name="Author" content="_Fernando Rodriguez Leon">
    <meta name="Copyright" content="Derechos Reservados">
    <link rel="stylesheet" type="text/css" href="estilos.css">
    <script type="text/javascript" src="../controllers/database.js"></script>
    <link href="../SpryAssets/SpryCollapsiblePanel.css" rel="stylesheet" type="text/css">
    <style type="text/css"> body {background-image: url(../img/Fondo-color-verde-688051.jpeg);}</style>
    <title>Mòdulo de geolocalizaciòn</title>
    
    <script type="text/javascript">

    var SOCKET=null;
    var MAP=null; 
    var MARCADORES=[];
    

       function  conectarse()
       {
            SOCKET = io.connect("http://127.0.0.1:3000");
        SOCKET.on("connect",function(){
            document.getElementById("idEstado").innerHTML="Funcionando bajo la clave : \n ";

            SOCKET.emit("loginMonitor",{monitor:"monitor"},function(data){
                document.getElementById("idSocket").innerHTML=data.id;

            });
            
        });
        SOCKET.on("disconnect",function(){
            document.getElementById("idEstado").innerHTML="Apagado";
            eliminarMarcadores();
        });


        ///////////// se inicia el mapa();////////
        iniciarMapa();
        getVehiculos();

            SOCKET.on("monitorPrincipal",function(data){//{id,lat,lon}
            
                        console.log(data);
                        
                var index=buscar(data);
            if(index===-1){//ES NUEVO
                nuevoPosicion(data);
                console.log("nuevo dato");
            }
            else{//REGISTRADO
                actualizarPosicion(index,data);
                console.log("acabo de actualizarPosicion");
            }

            });
        SOCKET.on("monitorPrincipalDisconnet",function(data){//{id,socket_id}
            
            console.log(data);
                var index=buscar(data);
            if(index!==-1){//ENCONTRADO
                removerPosicion(index);
            }
            });
    //iniciarMapa();
        
    
        }
    //-----------------------------

var myVar = setInterval(myTimer, 1000);

function myTimer() {
  var d = new Date();
  var t = d.toLocaleTimeString();
  document.getElementById("idHora").innerHTML = t;
}


    
    function getVehiculos()
    {
        
        console.log("estoy llamando a getVehiculos");
        SOCKET.emit("posicionVehiculos");
         setTimeout("getVehiculos()", 8000); 
         //setInterval("getVehiculos()", 10000);

    }

    function iniciarMapa(){
        var mapProp = {
            center:new google.maps.LatLng(6.5413928,-73.1281133),
            zoom:14,
            mapTypeId:google.maps.MapTypeId.ROADMAP
          };
         MAP=new google.maps.Map(document.getElementById("idGoogleMap"),mapProp);
         
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    function buscar(data){   ///vehi1, lat, long
        var index=-1;       
        var n=MARCADORES.length;
        for(var i=0;i<n;i++){
            if(MARCADORES[i].getId()==data.id){
                index=i;
                break;
            }
        }           
        return index;           
    }   
    function nuevoPosicion(data){
        console.log("me llamaste a pintar");
        var marca=new cMarker(MAP,data.id,data.lat,data.lon);
        marca.dibujar();
        MARCADORES.push(marca);//agregamos al ARRAY
        
    }
    function actualizarPosicion(index,data){
        var marca=MARCADORES[index];
        marca.remover();    
        marca.update(data.lat,data.lon);
        marca.dibujar();
        console.log("acabas de actualizarPosicion desde el metodo");
    }
    function removerPosicion(index){
        var marca=MARCADORES[index];
        marca.remover();
        MARCADORES.splice(index, 1);//eliminamos del ARRAY  
    }
    function eliminarMarcadores(){
        var n=MARCADORES.length;
        for(var i=0;i<n;i++){
            MARCADORES[i].remover();
        }
        MARCADORES=[];
    }
    </script>
</head>
<body onload="conectarse()">
<header>
    <div id="CollapsiblePanel1" class="CollapsiblePanel">
      <div class="CollapsiblePanelTab" tabindex="0">Menu</div>
      <div class="CollapsiblePanelContent"><a href="principal.html">Regresar al menu principal<a/></div>
  </div>
    <h1>Mòdulo de geolocalizaciòn</h1>
</header>
<div id="idGoogleMap" style="width:100%;height:450px;"></div>
<div id="idEstado" style="text-align: center; font-style: italic;"></div>
<div id="idSocket" style="text-align: center; font-style: italic;"></div>
<div id="idHora" style="text-align-last: center; font-style: italic;"></div>
<footer>
  <h3 style="text-align: center; font-style: italic;">Proyecto desarrollado para optar por el tìtulo de ingeniero de sistemas</h3>
</footer>
<script type="text/javascript">
var CollapsiblePanel1 = new Spry.Widget.CollapsiblePanel("CollapsiblePanel1");
</script>
</body>
</html>


--------------------------------------------------------------------------------------------

